/*!
 * gulp-nunjucks-sass-template
 * A Gulp 4 template including SCSS, Nunjucks, JS and more
 *
 * Url: https://github.com/DefaultSimon
 * Author: Simon Goričar
 * Copyright 2021. License: MIT
 */
window.onload=(()=>{"use strict";const e=new Vivus("menu_designs",{duration:300,animTimingFunction:Vivus.EASE,onReady:()=>{!function t(){setTimeout(()=>{e.stop().reset().play(1,t())},6e3)}()}});const t=new Vivus("menu_projects",{type:"scenario-sync",animTimingFunction:Vivus.EASE,onReady:()=>{!function e(){setTimeout(()=>{t.stop().reset().play(1,e())},7e3)}()}});const n=new Vivus("map",{type:"sync",onReady:()=>{!function e(){setTimeout(()=>{n.stop().reset().play(1,e())},6e3)}()}});if(document.querySelector(".paginator")){let e=document.querySelectorAll(".paginator .paginator_link"),t=document.querySelectorAll(".section");window.onscroll=(()=>{let n=window.scrollY,o=window.innerHeight;t.forEach((t,c)=>{console.log(t.getBoundingClientRect().y+n,n+o/2),console.log(t.getBoundingClientRect().y+n<n+o/2),t.getBoundingClientRect().y+n<n+o/2?t.getBoundingClientRect().y+t.getBoundingClientRect().height+n>n+o/2?e[c].classList.add("current","active"):e[c].classList.remove("current"):(e[c].classList.contains("active")&&e[c].classList.remove("active"),e[c].classList.contains("current")&&e[c].classList.remove("current"))})})}const o=e=>"7"===e?"7 (":"8"===e?"8 (":"9"===e?"7 (9":"7 (";document.querySelectorAll("input").forEach(e=>{e.addEventListener("input",t=>{const n=e.value.replace(/\D+/g,"");let c;c=e.value.includes("+8")||"8"===e.value[0]?"":"+";for(let e=0;e<n.length&&e<11;e++){switch(e){case 0:c+=o(n[e]);continue;case 4:c+=") ";break;case 7:case 9:c+="-"}c+=n[e]}e.value=c})});const c=document.querySelector(".header_button"),i=document.querySelector(".header_mobile ul");c.onclick=(()=>{i.classList.toggle("show")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
